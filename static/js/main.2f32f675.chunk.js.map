{"version":3,"sources":["components/card.jsx","components/card-list.jsx","components/search-input.jsx","components/button.jsx","components/top-bar.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","name","react_default","a","createElement","className","src","concat","alt","toUpperCase","CardList","pokemonList","searchValue","filterdList","filter","pokemon","toLowerCase","includes","map","v","i","card","key","SearchInput","_ref","handleChange","type","placeholder","onChange","Button","handleClick","innerText","onClick","TopBar","sortListFunc","buttonText","searchFunc","search_input","components_button","App","state","data","nextList","imgUrl","sortFromTo","getNewPokemonList","fetch","_this","then","response","json","pokemonListJson","setState","Object","objectSpread","toConsumableArray","results","next","searchList","sortPokemonList","isDirectionDown","sortedList","sort","b","searchPokemon","event","currentValue","target","value","_this2","this","react","top_bar","card_list","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f32f675.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './card.styles.css'\r\n\r\nconst Card = (props) => {\r\n  const name = props.name; \r\n  return (\r\n    <figure className=\"card\">\r\n      <picture>\r\n        <img className=\"art\"\r\n          src={`https://img.pokemondb.net/artwork/${name}.jpg`}\r\n          alt=\"Nothing to Show\"\r\n        />\r\n      </picture>\r\n      <figcaption className=\"label\">{name.toUpperCase()}</figcaption>\r\n    </figure>\r\n  );\r\n};\r\n\r\nCard.propTypes = {\r\n  name: PropTypes.string,\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './card-list.styles.css';\r\nimport Card from './card';\r\n\r\n\r\nconst CardList = props => {\r\n  const { pokemonList, searchValue } = props;\r\n  const filterdList = pokemonList.filter(pokemon =>\r\n    pokemon.name.toLowerCase().includes(searchValue.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div className=\"card-list\">\r\n      {filterdList.map((v, i) => {\r\n        return <Card name={v.name} key={i} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nCardList.propTypes = {\r\n  pokemonList: PropTypes.arrayOf(PropTypes.object),\r\n  searchValue: PropTypes.string\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\nimport './search-input.style.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SearchInput = ({ handleChange }) => {\r\n  return <input className=\"search-box\" type=\"text\" placeholder=\"Type to search...\" onChange={handleChange} />;\r\n};\r\n\r\nSearchInput.propTypes = {\r\n  handleChange: PropTypes.func\r\n};\r\n\r\nexport default SearchInput;\r\n","import React from 'react';\r\nimport './button.style.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Button = ({ handleClick, innerText }) => {\r\n  return (\r\n    <button className=\"button\" onClick={handleClick}>\r\n      {innerText}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  handleClick: PropTypes.func,\r\n  innerText: PropTypes.string\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './top-bar.style.css';\r\nimport SearchInput from './search-input';\r\nimport Button from './button';\r\n\r\nconst TopBar = ({ sortListFunc, buttonText, searchFunc }) => {\r\n  return (\r\n    <div className=\"top-bar\">\r\n      <SearchInput handleChange={searchFunc} />\r\n      <Button handleClick={sortListFunc} innerText={buttonText} />\r\n    </div>\r\n  );\r\n};\r\n\r\nTopBar.propTypes = {\r\n  sortListFunc: PropTypes.func,\r\n  buttonText: PropTypes.oneOf(['SORT ↓', 'SORT ↑']),\r\n  searchFunc: PropTypes.func\r\n};\r\n\r\nexport default TopBar;\r\n","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport CardList from './components/card-list';\nimport TopBar from './components/top-bar';\nimport Button from './components/button';\n\nclass App extends Component {\n  state = {\n    data: {\n      pokemonList: [{ name: 'data is loading' }],\n      searchValue: '',\n      nextList: null,\n      imgUrl: '',\n      sortFromTo: '↓'\n    }\n  };\n\n  componentDidMount() {\n    fetch('https://pokeapi.co/api/v2/pokemon/?offset=0&limit=20')\n      .then(response => {\n        return response.json();\n      })\n      .then(pokemonListJson => {\n        this.setState({\n          data: {\n            ...this.state.data,\n            pokemonList: pokemonListJson.results,\n            nextList: pokemonListJson.next\n          }\n        });\n      });\n  }\n\n  getNewPokemonList = () => {\n    fetch(this.state.data.nextList)\n      .then(response => {\n        return response.json();\n      })\n      .then(pokemonListJson => {\n        this.setState({\n          data: {\n            ...this.state.data,\n            pokemonList: [\n              ...this.state.data.pokemonList,\n              ...pokemonListJson.results\n            ],\n            nextList: pokemonListJson.next,\n            searchList: null\n          }\n        });\n      });\n  };\n\n  sortPokemonList = () => {\n    const isDirectionDown = this.state.data.sortFromTo === '↑';\n    const sortedList = this.state.data.pokemonList.sort((a, b) => {\n      switch (true) {\n        case isDirectionDown && a.name > b.name:\n          return 1;\n\n        case isDirectionDown && a.name < b.name:\n          return -1;\n\n        case !isDirectionDown && a.name < b.name:\n          return 1;\n\n        case !isDirectionDown && a.name > b.name:\n          return -1;\n\n        default:\n          return 0;\n      }\n    });\n\n    this.setState({\n      data: {\n        ...this.state.data,\n        pokemonList: sortedList,\n        sortFromTo: isDirectionDown ? '↓' : '↑'\n      }\n    });\n  };\n\n  searchPokemon = event => {\n    const currentValue = event.target.value;\n\n    this.setState({\n      data: {\n        ...this.state.data,\n        searchValue: currentValue\n      }\n    });\n  };\n\n  render() {\n    const data = this.state.data;\n\n    return (\n      <Fragment>\n        <TopBar\n          searchFunc={this.searchPokemon}\n          sortListFunc={this.sortPokemonList}\n          buttonText={`SORT ${this.state.data.sortFromTo}`}\n        />\n        <CardList\n          pokemonList={data.pokemonList}\n          searchValue={data.searchValue}\n        />\n        <Button handleClick={this.getNewPokemonList} innerText=\"MORE\" />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}